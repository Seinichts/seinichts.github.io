[{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/manifest.json","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/search/_index.zh-cn/","tags":null,"title":""},{"categories":null,"content":" Normally if without any statements, \\( f \\) is a real-valued continuous function on \\( [a,b] \\) Definition of differentiation Definition For a function \\(f\\), defined on interval \\([a,b]\\). For \\(x \\in [a,b ]\\) \\[\\lim_{t \\to x } \\frac{f(t) - f(x)}{t - x} \\] is called the differentiate of f at x, denotes by \\(f\u0026rsquo;(x)\\).\nApparently, to let \\(f\u0026rsquo;(x)\\) exists, the function has to have left/right limit (or both) at the point \\(x\\). That is, differentiable implies the function \\(f\\) is also continuous at the point.\nHowever, continuity does not imply the differentiability of \\(f\\) at x. If left limit at point \\(x\\) does not equal to the right limit, then \\(f\u0026rsquo;(x)\\) will have two different value for one point, which is not possible for a well-defined function.\nCalculation Basic operations First we have to define the most basic operation, that is \\(+(-), \\times, \\div\\)\nAddition \\begin{align*} (f + g)\u0026rsquo;(x) \u0026amp;= \\lim_{t \\to x} \\frac{(f+g)(t) - (f+g)(x)}{t-x} \\\\ \u0026amp;= \\lim_{ t \\to x } \\frac{f(t) - f(x) +g(t) - g(x)}{t - x} \\\\ \u0026amp;= f\u0026rsquo;(x) + g\u0026rsquo;(x) \\end{align*}\nmultiplication the idea is use ÂáëÈÖçÊ≥ï to pairing up\n\\begin{align*} fg\u0026rsquo;(x) \u0026amp;= \\lim_{ t \\to x } \\frac{fg(t) - fg(x)}{t -x} \\\\ \u0026amp;= \\frac{f(t)(g(t) - g(x)) + g(x)(f(t) - f(x))}{ t -x } \\\\ \u0026amp;= f(x)g\u0026rsquo;(x) + g(x) f\u0026rsquo;(x) \\end{align*}\ndivision reduction method to transform to a form which is similar to the multiplication \\begin{align*} \\frac{f}{g}\u0026rsquo;(x) \u0026amp;= \\lim_{ t \\to x } \\frac{\\frac{f}{g}(t) - \\frac{f}{g}(x) }{t - x} \\\\ \u0026amp;= \\lim_{ t \\to x } \\frac{1}{g(t)g(x)} \\left( \\frac{f(t)g(x)-f(x)g(t)}{t - x} \\right) \\\\ \u0026amp;= \\lim_{ t \\to x } \\frac{1}{g(t)g(x)}\\left( \\frac{g(x)(f(t) - f(x)) - f(x)(g(t) - g(x))}{t - x} \\right) \\\\ \u0026amp;= \\frac{f\u0026rsquo;(x)g(x) - f(x)g\u0026rsquo;(x)}{g^{2}(x)} \\end{align*}\nchain rule this is the most important rule in calculation of differentiation. theorem for function \\(f, g\\), if \\(f\\) is differentiable at \\(x\\), and \\(g\\) is differentiable at \\(f(x)\\) then for \\(h := g \\circ f\\). \\[h\u0026rsquo;(x) = g\u0026rsquo;(f(x))f\u0026rsquo;(x)\\]\nmean value theorem mean value theorem is a characterisation of the continuity of a function and its derivative. there are three version of it lemma let \\(f\\) defines on \\((a,b)\\) and \\(f( c)\\) is a local maximum/minimum, then \\(f\u0026rsquo;( c) = 0\\)\nthe derivative is greater than zero approaching from left hand side, and less than zero when approaching from right hand side, then by sandwich\u0026rsquo;s theorem.\nthe mean value theorem (lagrange) theorem \\(f\\) are continuous on \\([a, b]\\) and differentiable on \\((a,b)\\). then \\[f(b) - f(a) = (b - a)f\u0026rsquo;(x)\\]\nspecial case of generalised mean value theorem let g(x) = x.\ngeneralised mean value theorem (cauchy) theorem \\(f\\) and \\(g\\) are continuous on \\([a,b]\\) and differentiable on \\((a,b)\\). then \\[ [f(b) - f(a)]g\u0026rsquo;(x) = [g(b) - g(a)]f\u0026rsquo;(x)\\] a geometrical interpretation is the mean value theorem for parametric function \\(x = g(t), y = f(t)\\) on \\(xy\\)-plane\nmotivation of cauchy mvt it generalises the mean value theorem to parametric functions.\nthe continuity of derivatives the intermediate value theorem for derivative portrays the connectedness and continuity of derivative\nthe difficulty of this theorem is we couldn\u0026rsquo;t know the continuity of the derivative of the function (second-kind discontinuity).\ntheorem suppose \\( f \\) is a real differentaible function on \\( [a,b] \\) and suppose \\( f\u0026rsquo;(a) \u0026lt; \\lambda \u0026lt; f\u0026rsquo;(b) \\) (or \u0026gt;). then there is a point \\( x \\in (a,b) \\) such that \\( f\u0026rsquo;(x) = \\lambda \\).\nintegrate it into \\( f \\) such that we could apply mean value theorem, because we know that \\( f \\) is continuous.\nl\u0026rsquo;hospital\u0026rsquo;s rule theorem suppose \\(g\u0026rsquo;(x) \\ne 0\\). if \\[f(x) \\to 0 \\text{ and } g(x) \\to 0 \\text{ as } x \\to a\\] or if \\[g(x) \\to \\infty \\text{ as } x \\to a\\] then \\[\\frac{f(x)}{g(x)} = \\frac{f\u0026rsquo;(x)}{g\u0026rsquo;(x)} \\text{ as } x \\to a.\\]\nidea use cauchy mean value theorem to approach a upper bound and a lower bound of \\(\\frac{f(x)}{g(x)}\\) and then use sandwich.\ntaylor\u0026rsquo;s theorem polynomial approximation of function\ntheorem suppose \\(f\\) is a real function defined on \\([a,b]\\) and \\(f^{(n-1)}\\) is continuous on \\([a, b]\\), \\(f^{(n)}\\) exists on \\((a,b)\\). for two distinct point \\(\\alpha, \\beta \\in [a, b]\\), define\n\\[p(t) = \\sum_{k=0}^{n-1} \\frac{f^{(k)}(a)}{k!} (t-a)^{k}\\]\nthen there exists \\(x \\in (\\alpha, \\beta )\\) such that\n\\[ f(\\beta) = p(\\beta) + \\frac{f^{(n)}(x)}{n!}(\\beta-\\alpha)^n\\]\nthe latter is called the remainder, and also be known as the error of the approximation.\nthis is a consequence of mean value theorem. note that for n = 1, this is just the mean value theorem.\ndetermine the errors from the polynomial to the function. then show that this error is negligible vector-valued functions basically the same as dealing with 2-dimensional by letting \\(\\varepsilon\\) be \\( \\sqrt[n]{\\varepsilon} \\). the continuity will remains according to the norm. but mean value theorem will become weaker on n-dimensional, since the graph of \\( f \\) now has more path from one point to another point. that, we could find a point \\( x \\in (a, b) \\) such that the relation becoming no longer an equal \\[ \\mathbf{f}(b) - \\mathbf{f}(a) \\le (b - a) \\left| \\mathbf{f}\u0026rsquo; (x) \\right|\\]\n","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/posts/differentiation/","tags":["math","todoist"],"title":"Differentiation"},{"categories":null,"content":"Welcome! This is Zelong Kuang üá®üá≥ from Univerisity of Melbourne. I am currently a Year 1 student at Bachelor of Science, majoring in pure mathematics.\n","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/posts/my-first-post/","tags":null,"title":"Hello!"},{"categories":null,"content":"Doom modules Modules Doom has this lovely modular configuration base that takes a lot of work out of configuring Emacs. Each module (when enabled) can provide a list of packages to install (on doom sync) and configuration to be applied. The modules can also have flags applied to tweak their behaviour.\n;;; init.el -*- lexical-binding: t; -*- ;; This file controls what Doom modules are enabled and what order they load in. ;; Press \u0026#39;K\u0026#39; on a module to view its documentation, and \u0026#39;gd\u0026#39; to browse its directory. (doom! :input \u0026lt;\u0026lt;doom-input\u0026gt;\u0026gt; :completion \u0026lt;\u0026lt;doom-completion\u0026gt;\u0026gt; :ui \u0026lt;\u0026lt;doom-ui\u0026gt;\u0026gt; :editor \u0026lt;\u0026lt;doom-editor\u0026gt;\u0026gt; :emacs \u0026lt;\u0026lt;doom-emacs\u0026gt;\u0026gt; :term \u0026lt;\u0026lt;doom-term\u0026gt;\u0026gt; :checkers \u0026lt;\u0026lt;doom-checkers\u0026gt;\u0026gt; :tools \u0026lt;\u0026lt;doom-tools\u0026gt;\u0026gt; :os \u0026lt;\u0026lt;doom-os\u0026gt;\u0026gt; :lang \u0026lt;\u0026lt;doom-lang\u0026gt;\u0026gt; :email \u0026lt;\u0026lt;doom-email\u0026gt;\u0026gt; :app \u0026lt;\u0026lt;doom-app\u0026gt;\u0026gt; :config \u0026lt;\u0026lt;doom-config\u0026gt;\u0026gt; ) Structure As you may have noticed by this point, this is a literate configuration. Doom has good support for this which we access though the literate module.\nWhile we\u0026rsquo;re in the :config section, we\u0026rsquo;ll use Dooms nicer defaults, along with the bindings and smartparens behaviour (the flags aren\u0026rsquo;t documented, but they exist).\nliterate (default +bindings +smartparens) Interface There\u0026rsquo;s a lot that can be done to enhance Emacs\u0026rsquo; capabilities. I reckon enabling half the modules Doom provides should do it.\n;; (company ; the ultimate code completion backend ;; +childframe) (corfu +icons +orderless +dabbrev) ; complete with cap(f), cape and a flying feather! ;;helm ; the *other* search engine for love and life ;;ido ; the other *other* search engine... ;; (ivy ; a search engine for love and life ;; +icons ; ... icons are nice ;; +prescient) ; ... I know what I want(ed) (vertico +icons) ; the search engine of the future ;;deft ; notational velocity for Emacs doom ; what makes DOOM look the way it does doom-dashboard ; a nifty splash screen for Emacs doom-quit ; DOOM quit-message prompts when you quit Emacs ;; (emoji +unicode) ; üôÇ ;;fill-column ; a `fill-column\u0026#39; indicator hl-todo ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW ;;hydra ; quick documentation for related commands ;; indent-guides ; highlighted indent columns, notoriously slow ligatures ; ligatures and symbols to make your code pretty again ;;minimap ; show a map of the code on the side modeline ; snazzy, Atom-inspired modeline, plus API nav-flash ; blink the current line after jumping ;;neotree ; a project drawer, like NERDTree for vim ophints ; highlight the region an operation acts on (popup ; tame sudden yet inevitable temporary windows +all ; catch all popups that start with an asterix +defaults) ; default popup rules ;; (tabs ; an tab bar for Emacs ;; +centaur-tabs) ; ... with prettier tabs treemacs ; a project drawer, like neotree but cooler ;; unicode ; extended unicode support for various languages (vc-gutter +pretty) ; vcs diff in the fringe vi-tilde-fringe ; fringe tildes to mark beyond EOB (window-select +numbers) ; visually switch windows workspaces ; tab emulation, persistence \u0026amp; separate workspaces zen ; distraction-free coding or writing (evil +everywhere) ; come to the dark side, we have cookies file-templates ; auto-snippets for empty files fold ; (nigh) universal code folding (format +onsave) ; automated prettiness ;;god ; run Emacs commands without modifier keys ;;lispy ; vim for lisp, for people who don\u0026#39;t like vim multiple-cursors ; editing in many places at once ;;objed ; text object editing for the innocent ;;parinfer ; turn lisp into python, sort of rotate-text ; cycle region at point between text candidates snippets ; my elves. They type so I don\u0026#39;t have to ;;word-wrap ; soft wrapping with language-aware indent (dired +icons) ; making dired pretty [functional] electric ; smarter, keyword-based electric-indent (ibuffer +icons) ; interactive buffer management undo ; persistent, smarter undo for your inevitable mistakes vc ; version-control and Emacs, sitting in a tree ;;eshell ; the elisp shell that works everywhere ;;shell ; simple shell REPL for Emacs ;;term ; basic terminal emulator for Emacs vterm ; the best terminal emulation in Emacs syntax ; tasing you for every semicolon you forget ;; spell ; tasing you for misspelling mispelling grammar ; tasing grammar mistake every you make ansible ; a crucible for infrastructure as code biblio ; Writes a PhD for you (citation needed) ;;debugger ; FIXME stepping through code, to help you add bugs ;;direnv ; be direct about your environment ;; docker ; port everything to containers ;;editorconfig ; let someone else argue about tabs vs spaces ein ; tame Jupyter notebooks with emacs (eval) ; run code, run (also, repls) ;;gist ; interacting with github gists (lookup ; helps you navigate your code and documentation +dictionary ; dictionary/thesaurus is nice +docsets) ; ...or in Dash docsets locally (lsp ; Language Server Protocol +peek) (magit ; a git porcelain for Emacs +forge) ; interface with git forges make ; run make tasks from Emacs ;;pass ; password manager for nerds pdf ; pdf enhancements ;;prodigy ; FIXME[[id:983f436e-02a1-4d2f-b274-761523d5ff5a][Contratiction?.org]] managing external services \u0026amp; code builders ;; rgb ; creating color strings ;;taskrunner ; taskrunner for all your projects ;;terraform ; infrastructure as code ;;tmux ; an API for interacting with tmux tree-sitter ; syntax and parsing, sitting in a tree... upload ; map local to remote projects via ssh/ftp macos ; MacOS-specific commands tty ; improve the terminal Emacs experience Language support We can be rather liberal with enabling support for languages as the associated packages/configuration are (usually) only loaded when first opening an associated file.\n;;agda ; types of types of types of types... ;;beancount ; mind the GAAP (cc +lsp +tree-sitter) ; C \u0026gt; C++ == 1 ;;clojure ; java with a lisp ;;common-lisp ; if you\u0026#39;ve seen one lisp, you\u0026#39;ve seen them all ;;coq ; proofs-as-programs ;;crystal ; ruby at the speed of c ;;csharp ; unity, .NET, and mono shenanigans data ; config/data formats ;;(dart +flutter) ; paint ui and not much else ;;dhall ; JSON with FP sprinkles ;;elixir ; erlang done right ;;elm ; care for a cup of TEA? emacs-lisp ; drown in parentheses ;;erlang ; an elegant language for a more civilized age ess ; emacs speaks statistics ;;faust ; dsp, but you get to keep your soul ;;fsharp ; ML stands for Microsoft\u0026#39;s Language ;;fstar ; (dependent) types and (monadic) effects and Z3 ;;gdscript ; the language you waited for ;;(graphql +lsp) ; Give queries a REST ;; (go +lsp) ; the hipster dialect (haskell +lsp) ; a language that\u0026#39;s lazier than I am ;;hy ; readability of scheme w/ speed of python ;;idris ; json ; At least it ain\u0026#39;t XML ;;(java +lsp) ; the poster child for carpal tunnel syndrome (javascript +lsp) ; all(hope(abandon(ye(who(enter(here)))))) ;; (julia +lsp) ; Python, R, and MATLAB in a blender ;;kotlin ; a better, slicker Java(Script) (latex ; writing papers in Emacs has never been so fun +latexmk ; what else would you use? +lsp +cdlatex ; quick maths symbols +fold) ; fold the clutter away nicities lean ; proof that mathematicians need help ;;factor ; for when scripts are stacked against you ;;ledger ; an accounting system in Emacs lua ; one-based indices? one-based indices markdown ; writing docs for people to ignore ;;nim ; python + lisp at the speed of c ;; nix ; I hereby declare \u0026#34;nix geht mehr!\u0026#34; ;;ocaml ; an objective camel (org ; organize your plain life in plain text +dragndrop ; drag \u0026amp; drop files/images into org buffers +hugo ; use Emacs for hugo blogging +noter ; enhanced PDF notetaking +jupyter ; ipython/jupyter support for babel +pandoc ; export-with-pandoc support +gnuplot ; who doesn\u0026#39;t like pretty pictures ;; +pomodoro ; be fruitful with the tomato technique +journal ; Record your life +present ; using org-mode for presentations +roam2) ; wander around notes ;;php ; perl\u0026#39;s insecure younger brother ;;plantuml ; diagrams for confusing people more ;;purescript ; javascript, but functional (python +lsp +pyright) ; beautiful is better than ugly ;;qt ; the \u0026#39;cutest\u0026#39; gui framework ever ;;racket ; a DSL for DSLs ;;raku ; the artist formerly known as perl6 ;;rest ; Emacs as a REST client ;;rst ; ReST in peace ;;(ruby +rails) ; 1.step {|i| p \u0026#34;Ruby is #{i.even? ? \u0026#39;love\u0026#39; : \u0026#39;life\u0026#39;}\u0026#34;} (rust +lsp) ; Fe2O3.unwrap().unwrap().unwrap().unwrap() ;;scala ; java, but good scheme ; a fully conniving family of lisps sh ; she sells {ba,z,fi}sh shells on the C xor ;;sml ; no, the /other/ ML ;;solidity ; do you need a blockchain? No. ;;swift ; who asked for emoji variables? ;;terra ; Earth and Moon in alignment for performance. ;; web ; the tubes yaml ; JSON, but readable ;; zig ; C, but simpler Input ;;bidi ; (tfel ot) thgir etirw uoy gnipleh ;;chinese ;;japanese ;;layout ; auie,ctsrnm is the superior home row Everything in Emacs It\u0026rsquo;s just too convenient being able to have everything in Emacs. I couldn\u0026rsquo;t resist the Email and Feed modules.\n;; (:if (executable-find \u0026#34;mu\u0026#34;) (mu4e + org)) ;;notmuch ;;(wanderlust +gmail) ;;calendar ; A dated approach to timetabling ;;emms ; Multimedia in Emacs is music to my ears everywhere ; *leave* Emacs!? You must be joking. irc ; how neckbeards socialize ;; (rss +org) ; emacs as an RSS reader ;;twitter ; twitter client https://twitter.com/vnought Disabled ;; Disabled packages (package! writegood-mode :disable t) Appearance Fonts (setq doom-font (font-spec :family \u0026#34;LXGW WenKai Mono\u0026#34; :size 22) doom-symbol-font (font-spec :family \u0026#34;JetbrainsMono Nerd Font\u0026#34; :size 22)) Theme (package! ef-themes) (setq doom-theme \u0026#39;ef-tritanopia-light) Line numbers This determines the style of line numbers in effect. If set to `nil\u0026rsquo;, line numbers are disabled. For relative line numbers, set this to `relative'.\n(setq display-line-numbers-type `relative) Set default frame size (add-to-list \u0026#39;default-frame-alist \u0026#39;(height . 35)) (add-to-list \u0026#39;default-frame-alist \u0026#39;(width . 80)) Lang Latex (setq +latex-viewers \u0026#39;(pdf-tools)) (after! auctex (prettify-symbols-mode) (cdlatex-mode) (reftex-mode)) Org Org itself (package! org :recipe (:host nil :repo \u0026#34;https://git.tecosaur.net/mirrors/org-mode.git\u0026#34; :remote \u0026#34;mirror\u0026#34; :fork (:host nil :repo \u0026#34;https://git.tecosaur.net/tec/org-mode.git\u0026#34; :branch \u0026#34;dev\u0026#34; :remote \u0026#34;tecosaur\u0026#34;) :files (:defaults \u0026#34;etc\u0026#34;) :build t :pre-build (with-temp-file \u0026#34;org-version.el\u0026#34; (require \u0026#39;lisp-mnt) (let ((version (with-temp-buffer (insert-file-contents \u0026#34;lisp/org.el\u0026#34;) (lm-header \u0026#34;version\u0026#34;))) (git-version (string-trim (with-temp-buffer (call-process \u0026#34;git\u0026#34; nil t nil \u0026#34;rev-parse\u0026#34; \u0026#34;--short\u0026#34; \u0026#34;HEAD\u0026#34;) (buffer-string))))) (insert (format \u0026#34;(defun org-release () \\\u0026#34;The release version of Org.\\\u0026#34; %S)\\n\u0026#34; version) (format \u0026#34;(defun org-git-version () \\\u0026#34;The truncate git commit hash of Org mode.\\\u0026#34; %S)\\n\u0026#34; git-version) \u0026#34;(provide \u0026#39;org-version)\\n\u0026#34;)))) :pin nil) (unpin! org) ; there be bugs Org directory If you use `org\u0026rsquo; and don\u0026rsquo;t want your org files in the default location below, change `org-directory\u0026rsquo;. It must be set before org loads!\n(setq org-directory \u0026#34;~/OneDrive/org\u0026#34;) (setq org-roam-directory \u0026#34;~/OneDrive/org-note\u0026#34;) As a GTD tool Capture template\nAlso, because I prefer \u0026ldquo;TODO\u0026rdquo; over \u0026ldquo;[ ]\u0026rdquo;. So I overwrite the default template\n(setq +org-capture-todo-file \u0026#34;inbox.org\u0026#34;) (after! org (setq org-capture-templates \u0026#39;((\u0026#34;t\u0026#34; \u0026#34;Personal todo\u0026#34; entry (file+headline +org-capture-todo-file \u0026#34;Inbox\u0026#34;) \u0026#34;* TODO %?\\n%i\\n%a\u0026#34; :prepend t) (\u0026#34;n\u0026#34; \u0026#34;Personal notes\u0026#34; entry (file+headline +org-capture-notes-file \u0026#34;Inbox\u0026#34;) \u0026#34;* %u %?\\n%i\\n%a\u0026#34; :prepend t) (\u0026#34;j\u0026#34; \u0026#34;Journal\u0026#34; entry (file+olp+datetree +org-capture-journal-file) \u0026#34;* %U %?\\n%i\\n%a\u0026#34; :prepend t) (\u0026#34;p\u0026#34; \u0026#34;Templates for projects\u0026#34;) (\u0026#34;pt\u0026#34; \u0026#34;Project-local todo\u0026#34; entry (file+headline +org-capture-project-todo-file \u0026#34;Inbox\u0026#34;) \u0026#34;* TODO %?\\n%i\\n%a\u0026#34; :prepend t) (\u0026#34;pn\u0026#34; \u0026#34;Project-local notes\u0026#34; entry (file+headline +org-capture-project-notes-file \u0026#34;Inbox\u0026#34;) \u0026#34;* %U %?\\n%i\\n%a\u0026#34; :prepend t) (\u0026#34;pc\u0026#34; \u0026#34;Project-local changelog\u0026#34; entry (file+headline +org-capture-project-changelog-file \u0026#34;Unreleased\u0026#34;) \u0026#34;* %U %?\\n%i\\n%a\u0026#34; :prepend t) (\u0026#34;o\u0026#34; \u0026#34;Centralized templates for projects\u0026#34;) (\u0026#34;ot\u0026#34; \u0026#34;Project todo\u0026#34; entry #\u0026#39;+org-capture-central-project-todo-file \u0026#34;* TODO %?\\n %i\\n %a\u0026#34; :heading \u0026#34;Tasks\u0026#34; :prepend nil) (\u0026#34;on\u0026#34; \u0026#34;Project notes\u0026#34; entry #\u0026#39;+org-capture-central-project-notes-file \u0026#34;* %U %?\\n %i\\n %a\u0026#34; :heading \u0026#34;Notes\u0026#34; :prepend t) (\u0026#34;oc\u0026#34; \u0026#34;Project changelog\u0026#34; entry #\u0026#39;+org-capture-central-project-changelog-file \u0026#34;* %U %?\\n %i\\n %a\u0026#34; :heading \u0026#34;Changelog\u0026#34; :prepend t)) ) ) Add a closed time when done\n(setq org-log-done \u0026#39;time) Visuals Org Modern\nFontifying org-mode buffers to be as pretty as possible is of paramount importance, and Minad\u0026rsquo;s lovely org-modern goes a long way in this regard.\n(package! org-modern :pin \u0026#34;98532cd61795f3f41fffe7d4f0fa4021d8c73ffa\u0026#34;) \u0026hellip;with a touch of configuration\u0026hellip;\n(use-package! org-modern :hook (org-mode . org-modern-mode) :config (setq org-modern-star \u0026#39;(\u0026#34;‚öÄ\u0026#34; \u0026#34;‚öÅ\u0026#34; \u0026#34;‚öÇ\u0026#34; \u0026#34;‚öÉ\u0026#34; \u0026#34;‚öÑ\u0026#34; \u0026#34;‚öÖ\u0026#34;) org-modern-table-vertical 1 org-modern-table-horizontal 0.2 org-modern-list \u0026#39;((43 . \u0026#34;‚û§\u0026#34;) (45 . \u0026#34;‚Äì\u0026#34;) (42 . \u0026#34;‚Ä¢\u0026#34;)) org-modern-todo-faces \u0026#39;((\u0026#34;TODO\u0026#34; :inverse-video t :inherit org-todo) (\u0026#34;PROJ\u0026#34; :inverse-video t :inherit +org-todo-project) (\u0026#34;STRT\u0026#34; :inverse-video t :inherit +org-todo-active) (\u0026#34;[-]\u0026#34; :inverse-video t :inherit +org-todo-active) (\u0026#34;HOLD\u0026#34; :inverse-video t :inherit +org-todo-onhold) (\u0026#34;WAIT\u0026#34; :inverse-video t :inherit +org-todo-onhold) (\u0026#34;[?]\u0026#34; :inverse-video t :inherit +org-todo-onhold) (\u0026#34;KILL\u0026#34; :inverse-video t :inherit +org-todo-cancel) (\u0026#34;NO\u0026#34; :inverse-video t :inherit +org-todo-cancel)) org-modern-footnote (cons nil (cadr org-script-display)) org-modern-block-fringe nil org-modern-block-name \u0026#39;((t . t) (\u0026#34;src\u0026#34; \u0026#34;¬ª\u0026#34; \u0026#34;¬´\u0026#34;) (\u0026#34;example\u0026#34; \u0026#34;¬ª‚Äì\u0026#34; \u0026#34;‚Äì¬´\u0026#34;) (\u0026#34;comment\u0026#34; \u0026#34;Ôêü\u0026#34; \u0026#34;Û∞ÜÑ\u0026#34;) (\u0026#34;quote\u0026#34; \u0026#34;‚ùù\u0026#34; \u0026#34;‚ùû\u0026#34;) (\u0026#34;export\u0026#34; \u0026#34;Ó∏∑\u0026#34; \u0026#34; \u0026#34;)) ;; org-modern-progress nil ;; org-modern-priority nil org-modern-horizontal-rule (make-string 36 ?‚îÄ) org-modern-checkbox \u0026#39;((88 . \u0026#34;Ôíß\u0026#34;) (45 . #(\u0026#34;ÓôÄ‚Äì\u0026#34; 0 2 (composition ((2))))) (32 . \u0026#34;ÓôÄ\u0026#34;)) org-modern-keyword \u0026#39;((t . t) (\u0026#34;title\u0026#34; . \u0026#34;Û∞ó¥\u0026#34;) (\u0026#34;subtitle\u0026#34; . \u0026#34;Û∞®ñ\u0026#34;) (\u0026#34;author\u0026#34; . \u0026#34;ÔìΩ\u0026#34;) (\u0026#34;email\u0026#34; . \u0026#34;ÔêØ\u0026#34;) (\u0026#34;date\u0026#34; . \u0026#34;Óº∑\u0026#34;) (\u0026#34;property\u0026#34; . \u0026#34;Û∞†≥\u0026#34;) (\u0026#34;options\u0026#34; . #(\u0026#34;Û∞òµ\u0026#34; 0 1 (display (height 0.75)))) (\u0026#34;startup\u0026#34; . \u0026#34;‚èª\u0026#34;) (\u0026#34;macro\u0026#34; . \u0026#34;Û±°Ñ\u0026#34;) (\u0026#34;bind\u0026#34; . \u0026#34;Û∞å∑\u0026#34;) (\u0026#34;bibliography\u0026#34; . \u0026#34;ÔêÖ\u0026#34;) (\u0026#34;print_bibliography\u0026#34; . \u0026#34;Û∞å±\u0026#34;) (\u0026#34;cite_export\u0026#34; . \u0026#34;ÔêÖ‚Üó\u0026#34;) (\u0026#34;print_glossary\u0026#34; . \u0026#34;Û∞å±·¥¨·∂ª\u0026#34;) (\u0026#34;glossary_sources\u0026#34; . \u0026#34;Û∞íª\u0026#34;) (\u0026#34;include\u0026#34; . \u0026#34;‚á§\u0026#34;) (\u0026#34;setupfile\u0026#34; . \u0026#34;‚áö\u0026#34;) (\u0026#34;html_head\u0026#34; . \u0026#34;üÖ∑\u0026#34;) (\u0026#34;html\u0026#34; . \u0026#34;üÖó\u0026#34;) (\u0026#34;latex_class\u0026#34; . \u0026#34;üÑª\u0026#34;) (\u0026#34;latex_class_options\u0026#34; . \u0026#34;üÑªÛ∞íì\u0026#34;) (\u0026#34;latex_header\u0026#34; . \u0026#34;üÖª\u0026#34;) (\u0026#34;latex_header_extra\u0026#34; . \u0026#34;üÖª‚Å∫\u0026#34;) (\u0026#34;latex\u0026#34; . \u0026#34;üÖõ\u0026#34;) (\u0026#34;beamer_theme\u0026#34; . \u0026#34;üÑ±\u0026#34;) (\u0026#34;beamer_color_theme\u0026#34; . \u0026#34;üÑ±Û∞èò\u0026#34;) (\u0026#34;beamer_font_theme\u0026#34; . \u0026#34;üÑ±ÔÄ±\u0026#34;) (\u0026#34;beamer_header\u0026#34; . \u0026#34;üÖ±\u0026#34;) (\u0026#34;beamer\u0026#34; . \u0026#34;üÖë\u0026#34;) (\u0026#34;attr_latex\u0026#34; . \u0026#34;üÑõ\u0026#34;) (\u0026#34;attr_html\u0026#34; . \u0026#34;üÑó\u0026#34;) (\u0026#34;attr_org\u0026#34; . \u0026#34;‚í™\u0026#34;) (\u0026#34;call\u0026#34; . \u0026#34;Û∞úé\u0026#34;) (\u0026#34;name\u0026#34; . \u0026#34;‚Åç\u0026#34;) (\u0026#34;header\u0026#34; . \u0026#34;‚Ä∫\u0026#34;) (\u0026#34;caption\u0026#34; . \u0026#34;‚ò∞\u0026#34;) (\u0026#34;results\u0026#34; . \u0026#34;ÓÆ¨\u0026#34;) (\u0026#34;filetags\u0026#34; . \u0026#34;ÔÄ¨\u0026#34;) )) (custom-set-faces! \u0026#39;(org-modern-statistics :inherit org-checkbox-statistics-todo))) Since org-modern\u0026rsquo;s tag face supplants Org\u0026rsquo;s tag face, we need to adjust the spell-check face ignore list\n(after! spell-fu (cl-pushnew \u0026#39;org-modern-tag (alist-get \u0026#39;org-mode +spell-excluded-faces-alist))) Emphasis markers\nWhile org-hide-emphasis-markers is very nice, it can sometimes make edits which occur at the border a bit more fiddley. We can improve this situation without sacrificing visual amenities with the org-appear package.\n(package! org-appear :recipe (:host github :repo \u0026#34;awth13/org-appear\u0026#34;) :pin \u0026#34;81eba5d7a5b74cdb1bad091d85667e836f16b997\u0026#34;) (setq org-hide-emphasis-markers t) (use-package! org-appear :hook (org-mode . org-appear-mode) :config (setq org-appear-autoemphasis t org-appear-autosubmarkers t org-appear-autolinks nil) ;; for proper first-time setup, `org-appear--set-elements\u0026#39; ;; needs to be run after other hooks have acted. (run-at-time nil nil #\u0026#39;org-appear--set-elements)) Title size\n(custom-set-faces \u0026#39;(org-level-1 ((t (:inherit outline-1 :height 1.15)))) \u0026#39;(org-level-2 ((t (:inherit outline-2 :height 1.125)))) \u0026#39;(org-level-3 ((t (:inherit outline-3 :height 1.1)))) \u0026#39;(org-level-4 ((t (:inherit outline-4 :height 1.075)))) \u0026#39;(org-level-5 ((t (:inherit outline-5 :height 1.05)))) \u0026#39;(org-level-6 ((t (:inherit outline-6 :height 1.025)))) \u0026#39;(org-document-title ((t (:height 1.8 :underline t)))) ) Reduced indent\nThanks to the various bits and bobs of setup we have here, the non-heading lines tend to appear over-indented in org-indent-mode. We can adjust this by modifying the generated text prefixes.\nThere‚Äôs another issue we can have when using mixed-pitch mode, where the line height is set by the indent prefix displayed with the fixed-pitch font. This means that on 0-indent lines the line spacing can be different, which doesn‚Äôt look very good. We can also solve this problem by modifying the generated text prefixes to but a fixed-pitch zero width space at the start of 0-indent lines instead of nothing.\n(defadvice! +org-indent--reduced-text-prefixes () :after #\u0026#39;org-indent--compute-prefixes (setq org-indent--text-line-prefixes (make-vector org-indent--deepest-level nil)) (when (\u0026gt; org-indent-indentation-per-level 0) (dotimes (n org-indent--deepest-level) (aset org-indent--text-line-prefixes n (org-add-props (concat (make-string (* n (1- org-indent-indentation-per-level)) ?\\s) (if (\u0026gt; n 0) (char-to-string org-indent-boundary-char) \u0026#34;\\u200b\u0026#34;)) nil \u0026#39;face \u0026#39;org-indent))))) Center images\n(setq org-image-align \u0026#39;center) Prettify\n(add-hook! \u0026#39;org-mode-hook #\u0026#39;+org-pretty-mode) Sticky header\n(package! org-sticky-header) (use-package! org-sticky-header :hook (org-mode . org-sticky-header-mode)) Latex in org Syntax highlighting\n(setq org-highlight-latex-and-related \u0026#39;(native latex entities)) (after! org (org-toggle-pretty-entities)) Org latex preview\n(use-package org-latex-preview :config ;; Increase preview width (plist-put org-latex-preview-appearance-options :page-width 0.8) ;; Use dvisvgm to generate previews ;; You don\u0026#39;t need this, it\u0026#39;s the default: (setq org-latex-preview-process-default \u0026#39;dvisvgm) ;; Turn on auto-mode, it\u0026#39;s built into Org and much faster/more featured than ;; org-fragtog. (Remember to turn off/uninstall org-fragtog.) (add-hook \u0026#39;org-mode-hook \u0026#39;org-latex-preview-auto-mode) ;; Block C-n and C-p from opening up previews when using auto-mode (add-hook \u0026#39;org-latex-preview-auto-ignored-commands \u0026#39;next-line) (add-hook \u0026#39;org-latex-preview-auto-ignored-commands \u0026#39;previous-line) ;; Enable consistent equation numbering (setq org-latex-preview-numbered t) ;; Bonus: Turn on live previews. This shows you a live preview of a LaTeX ;; fragment and updates the preview in real-time as you edit it. ;; To preview only environments, set it to \u0026#39;(block edit-special) instead (setq org-latex-preview-live \u0026#39;(inline block edit-special)) ;; More immediate live-previews -- the default delay is 1 second (setq org-latex-preview-live-debounce 0.4)) (defun latex-preview () (interactive) (execute-kbd-macro (kbd \u0026#34;SPC u SPC u C-c C-x C-l\u0026#34;))) (map! :leader :desc \u0026#34;Latex preview\u0026#34; :n \u0026#34;l l\u0026#34; #\u0026#39;latex-preview) Dvisvgm setting\n(thread-first (alist-get \u0026#39;dvisvgm org-latex-preview-process-alist) (plist-get :image-converter) (setf \u0026#34;dvisvgm --page=1- --libgs=/opt/homebrew/bin/gs --optimize --clipjoin --relative --no-fonts --bbox=preview -o %B-%%9p.svg %f\u0026#34;) ) Always center displaymath\n(use-package! org-latex-preview :config (defun my/org-latex-preview-uncenter (ov) (overlay-put ov \u0026#39;before-string nil)) (defun my/org-latex-preview-recenter (ov) (overlay-put ov \u0026#39;before-string (overlay-get ov \u0026#39;justify))) (defun my/org-latex-preview-center (ov) (save-excursion (goto-char (overlay-start ov)) (when-let* ((elem (org-element-context)) ((or (eq (org-element-type elem) \u0026#39;latex-environment) (string-match-p \u0026#34;^\\\\\\\\\\\\[\u0026#34; (org-element-property :value elem)))) (img (overlay-get ov \u0026#39;display)) (prop `(space :align-to (- center (0.55 . ,img)))) (justify (propertize \u0026#34; \u0026#34; \u0026#39;display prop \u0026#39;face \u0026#39;default))) (overlay-put ov \u0026#39;justify justify) (overlay-put ov \u0026#39;before-string (overlay-get ov \u0026#39;justify))))) (define-minor-mode org-latex-preview-center-mode \u0026#34;Center equations previewed with `org-latex-preview\u0026#39;.\u0026#34; :global nil (if org-latex-preview-center-mode (progn (add-hook \u0026#39;org-latex-preview-overlay-open-functions #\u0026#39;my/org-latex-preview-uncenter nil :local) (add-hook \u0026#39;org-latex-preview-overlay-close-functions #\u0026#39;my/org-latex-preview-recenter nil :local) (add-hook \u0026#39;org-latex-preview-overlay-update-functions #\u0026#39;my/org-latex-preview-center nil :local)) (remove-hook \u0026#39;org-latex-preview-overlay-close-functions #\u0026#39;my/org-latex-preview-recenter) (remove-hook \u0026#39;org-latex-preview-overlay-update-functions #\u0026#39;my/org-latex-preview-center) (remove-hook \u0026#39;org-latex-preview-overlay-open-functions #\u0026#39;my/org-latex-preview-uncenter)))) And add hook onto org mode\n(add-hook! \u0026#39;org-mode-hook #\u0026#39;org-latex-preview-center-mode) Health check\n(defun org-latex-preview-check-health (\u0026amp;optional inter) \u0026#34;Inspect the relevent system state and setup. INTER signals whether the function has been called interactively.\u0026#34; (interactive (list t)) ;; Collect information (let* ((diag `(:interactive ,inter))) (plist-put diag :org-version org-version) ;; modified variables (plist-put diag :modified (let ((list)) (mapatoms (lambda (v) (and (boundp v) (string-match \u0026#34;\\\\`\\\\(org-latex-\\\\|org-persist-\\\\)\u0026#34; (symbol-name v)) (or (and (symbol-value v) (string-match \u0026#34;\\\\(-hook\\\\|-function\\\\)\\\\\u0026#39;\u0026#34; (symbol-name v))) (and (get v \u0026#39;custom-type) (get v \u0026#39;standard-value) (not (equal (symbol-value v) (eval (car (get v \u0026#39;standard-value)) t))))) (push (cons v (symbol-value v)) list)))) list)) ;; Executables ;; latex processors (dolist (processor org-latex-compilers) (when-let ((path (executable-find processor))) (let ((version (with-temp-buffer (thread-last (concat processor \u0026#34; --version\u0026#34;) (shell-command-to-string) (insert)) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (push (list processor version path) (plist-get diag :latex-processors))))) ;; Image converters (dolist (converter \u0026#39;(\u0026#34;dvipng\u0026#34; \u0026#34;dvisvgm\u0026#34; \u0026#34;convert\u0026#34;)) (when-let ((path (executable-find converter))) (let ((version (with-temp-buffer (thread-last (concat converter \u0026#34; --version\u0026#34;) (shell-command-to-string) (insert)) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (push (list converter version path) (plist-get diag :image-converters))))) (when inter (with-current-buffer (get-buffer-create \u0026#34;*Org LaTeX Preview Report*\u0026#34;) (let ((inhibit-read-only t)) (erase-buffer) (insert (propertize \u0026#34;Your LaTeX preview process\u0026#34; \u0026#39;face \u0026#39;outline-1)) (insert \u0026#34;\\n\\n\u0026#34;) (let* ((latex-available (cl-member org-latex-compiler (plist-get diag :latex-processors) :key #\u0026#39;car :test #\u0026#39;string=)) (precompile-available (and latex-available (not (member org-latex-compiler \u0026#39;(\u0026#34;lualatex\u0026#34; \u0026#34;xelatex\u0026#34;))))) (proc-info (alist-get org-latex-preview-process-default org-latex-preview-process-alist)) (image-converter (cadr (plist-get proc-info :programs))) (image-converter (cl-find-if (lambda (c) (string= image-converter c)) (plist-get diag :image-converters) :key #\u0026#39;car)) (image-output-type (plist-get proc-info :image-output-type))) (if org-latex-preview-process-precompiled (insert \u0026#34;Precompile with \u0026#34; (propertize (map-elt org-latex-precompile-compiler-map org-latex-compiler) \u0026#39;face (list (if precompile-available \u0026#39;(:inherit success :box t) \u0026#39;(:inherit error :box t)) \u0026#39;org-block)) \u0026#34; ‚Üí \u0026#34;)) (insert \u0026#34;LaTeX Compile with \u0026#34; (propertize org-latex-compiler \u0026#39;face (list (if latex-available \u0026#39;(:inherit success :box t) \u0026#39;(:inherit error :box t)) \u0026#39;org-block)) \u0026#34; ‚Üí \u0026#34;) (insert \u0026#34;Convert to \u0026#34; (propertize (upcase image-output-type) \u0026#39;face \u0026#39;(:weight bold)) \u0026#34; with \u0026#34; (propertize (car image-converter) \u0026#39;face (list (if image-converter \u0026#39;(:inherit success :box t) \u0026#39;(:inherit error :box t)) \u0026#39;org-block)) \u0026#34;\\n\\n\u0026#34;) (insert (propertize org-latex-compiler \u0026#39;face \u0026#39;outline-3) \u0026#34;\\n\u0026#34; (if latex-available (concat (propertize (mapconcat #\u0026#39;identity (map-nested-elt diag `(:latex-processors ,org-latex-compiler)) \u0026#34;\\n\u0026#34;) \u0026#39;face \u0026#39;org-block) \u0026#34;\\n\u0026#34; (when (and latex-available (not precompile-available)) (propertize (format \u0026#34;\\nWarning: Precompilation not available with %S!\\n\u0026#34; org-latex-compiler) \u0026#39;face \u0026#39;warning))) (propertize \u0026#34;Not found in path!\\n\u0026#34; \u0026#39;face \u0026#39;error)) \u0026#34;\\n\u0026#34;) (insert (propertize (cadr (plist-get proc-info :programs)) \u0026#39;face \u0026#39;outline-3) \u0026#34;\\n\u0026#34; (if image-converter (propertize (concat (mapconcat #\u0026#39;identity (cdr image-converter) \u0026#34;\\n\u0026#34;) \u0026#34;\\n\u0026#34;) \u0026#39;face \u0026#39;org-block) (propertize \u0026#34;Not found in path!\\n\u0026#34; \u0026#39;face \u0026#39;error)) \u0026#34;\\n\u0026#34;) ;; dvisvgm version check (when (equal (car-safe image-converter) \u0026#34;dvisvgm\u0026#34;) (let* ((version-string (cadr image-converter)) (dvisvgm-ver (progn (string-match \u0026#34;\\\\([0-9.]+\\\\)\u0026#34; version-string) (match-string 1 version-string)))) (when (version\u0026lt; dvisvgm-ver \u0026#34;3.0\u0026#34;) (insert (propertize (format \u0026#34;Warning: dvisvgm version %s \u0026lt; 3.0, displaymath will not be centered.\u0026#34; dvisvgm-ver) \u0026#39;face \u0026#39;warning) \u0026#34;\\n\\n\u0026#34;)) (unless (string-match-p \u0026#34; RSVG\u0026#34; system-configuration-features) (insert (propertize \u0026#34;Error: Emacs was not compiled with SVG support, images cannot be displayed with dvisvgm\u0026#34; \u0026#39;face \u0026#39;error))))) ;; png support check (when (member (car-safe image-converter) \u0026#39;(\u0026#34;dvipng\u0026#34; \u0026#34;convert\u0026#34;)) (unless (string-match-p \u0026#34; PNG\u0026#34; system-configuration-features) (insert (propertize (format \u0026#34;Error: Emacs was not compiled with PNG support, images cannot be displayed with %s\u0026#34; (car-safe image-converter)))))) (when (not (and latex-available image-converter)) (insert \u0026#34;path: \u0026#34; (getenv \u0026#34;PATH\u0026#34;) \u0026#34;\\n\\n\u0026#34;))) ;; Settings (insert (propertize \u0026#34;LaTeX preview options\u0026#34; \u0026#39;face \u0026#39;outline-2) \u0026#34;\\n\u0026#34;) (pcase-dolist (`(,var . ,msg) `((,org-latex-preview-process-precompiled . \u0026#34;Precompilation \u0026#34;) (,org-latex-preview-numbered . \u0026#34;Equation renumbering \u0026#34;) (,org-latex-preview-cache . \u0026#34;Caching with org-persist \u0026#34;))) (insert (propertize \u0026#34;‚Ä¢ \u0026#34; \u0026#39;face \u0026#39;org-list-dt) msg (if var (propertize \u0026#34;ON\u0026#34; \u0026#39;face \u0026#39;(success bold org-block)) (propertize \u0026#34;OFF\u0026#34; \u0026#39;face \u0026#39;(error bold org-block))) \u0026#34;\\n\u0026#34;)) (insert \u0026#34;\\n\u0026#34; (propertize \u0026#34;LaTeX preview sizing\u0026#34; \u0026#39;face \u0026#39;outline-2) \u0026#34;\\n\u0026#34; (propertize \u0026#34;‚Ä¢\u0026#34; \u0026#39;face \u0026#39;org-list-dt) \u0026#34; Page width \u0026#34; (propertize (format \u0026#34;%S\u0026#34; (plist-get org-latex-preview-appearance-options :page-width)) \u0026#39;face \u0026#39;(org-code org-block)) \u0026#34; (display equation width in LaTeX)\\n\u0026#34; (propertize \u0026#34;‚Ä¢\u0026#34; \u0026#39;face \u0026#39;org-list-dt) \u0026#34; Scale \u0026#34; (propertize (format \u0026#34;%.2f\u0026#34; (plist-get org-latex-preview-appearance-options :scale)) \u0026#39;face \u0026#39;(org-code org-block)) \u0026#34; (PNG pixel density multiplier)\\n\u0026#34; (propertize \u0026#34;‚Ä¢\u0026#34; \u0026#39;face \u0026#39;org-list-dt) \u0026#34; Zoom \u0026#34; (propertize (format \u0026#34;%.2f\u0026#34; (plist-get org-latex-preview-appearance-options :zoom)) \u0026#39;face \u0026#39;(org-code org-block)) \u0026#34; (display scaling factor)\\n\\n\u0026#34;) (insert (propertize \u0026#34;LaTeX preview preamble\u0026#34; \u0026#39;face \u0026#39;outline-2) \u0026#34;\\n\u0026#34;) (let ((major-mode \u0026#39;org-mode)) (let ((point-1 (point))) (insert org-latex-preview-preamble \u0026#34;\\n\u0026#34;) (org-src-font-lock-fontify-block \u0026#39;latex point-1 (point)) (add-face-text-property point-1 (point) \u0026#39;(:inherit org-block :height 0.9))) (insert \u0026#34;\\n\u0026#34;) ;; Diagnostic output (insert (propertize \u0026#34;Diagnostic info (copied)\u0026#34; \u0026#39;face \u0026#39;outline-2) \u0026#34;\\n\\n\u0026#34;) (let ((point-1 (point))) (pp diag (current-buffer)) (org-src-font-lock-fontify-block \u0026#39;emacs-lisp point-1 (point)) (add-face-text-property point-1 (point) \u0026#39;(:height 0.9)))) (gui-select-text (prin1-to-string diag)) (special-mode)) (setq-local revert-buffer-function (lambda (\u0026amp;rest _) (call-interactively #\u0026#39;org-latex-preview-check-health) (message \u0026#34;Refreshed LaTeX preview diagnostic\u0026#34;))) (let ((message-log-max nil)) (toggle-truncate-lines 1)) (goto-char (point-min)) (display-buffer (current-buffer)))) diag)) latex editing\nPrettify symbols\n(setq org-pretty-entities nil org-pretty-entities-include-sub-superscripts nil ) cdlatex in org\n(add-hook! \u0026#39;org-mode-hook #\u0026#39;org-cdlatex-mode) \u0026rsquo; key modify\n(setq cdlatex-math-modify-alist \u0026#39;((?t \u0026#34;\\\\mathbb\u0026#34; \u0026#34;\u0026#34; t nil nil) (?v \u0026#34;\\\\vec\u0026#34; \u0026#34;\u0026#34; t nil nil) (?\u0026gt; \u0026#34;\\\\check\u0026#34; \u0026#34;\u0026#34; t nil nil) (?s \u0026#34;\\\\sqrt\u0026#34; \u0026#34;\u0026#34; t nil nil) (?a \u0026#34;| ? |\u0026#34; nil nil nil nil) (?l \u0026#34;\\\\text\u0026#34; \u0026#34;\u0026#34; t t nil) )) symbol alist modify\n(defun my/set-cdlatex-math-symbol-alist () (setq cdlatex-math-symbol-alist \u0026#39;((?0 (\u0026#34;\\\\varnothing\u0026#34; \u0026#34;\\\\emptyset\u0026#34;)) (?1 (\u0026#34;\\\\ONE\u0026#34; \u0026#34;\\\\one\u0026#34;)) (?. (\u0026#34;\\\\cdot\u0026#34; \u0026#34;\\\\circ\u0026#34;)) (?v (\u0026#34;\\\\vee\u0026#34; \u0026#34;\\\\bigvee\u0026#34;)) (?\u0026amp; (\u0026#34;\\\\wedge\u0026#34; \u0026#34;\\\\bigwedge\u0026#34;)) (?9 (\u0026#34;\\\\cap\u0026#34; \u0026#34;\\\\bigcap\u0026#34; \u0026#34;\\\\bigoplus\u0026#34;)) (?+ (\u0026#34;\\\\cup\u0026#34; \u0026#34;\\\\bigcup\u0026#34; \u0026#34;\\\\oplus\u0026#34;)) (?- (\u0026#34;\\\\rightharpoonup\u0026#34; \u0026#34;\\\\hookrightarrow\u0026#34; \u0026#34;\\\\circlearrowleft\u0026#34;)) (?= (\u0026#34;\\\\equiv\u0026#34; \u0026#34;\\\\Leftrightarrow\u0026#34; \u0026#34;\\\\Longleftrightarrow\u0026#34;)) (?~ (\u0026#34;\\\\sim\u0026#34; \u0026#34;\\\\approx\u0026#34; \u0026#34;\\\\propto\u0026#34;)) (?L (\u0026#34;\\\\Lambda\u0026#34; \u0026#34;\\\\limits\u0026#34;)) (?* (\u0026#34;\\\\times\u0026#34; \u0026#34;\\\\otimes\u0026#34; \u0026#34;\\\\bigotimes\u0026#34;)) (?e (\u0026#34;\\\\eps\u0026#34; \u0026#34;\\\\epsilon\u0026#34; \u0026#34;\\\\exp\\\\Big( ? \\\\Big)\u0026#34;)) (?\u0026gt; (\u0026#34;\\\\mapsto\u0026#34; \u0026#34;\\\\longrightarrow\u0026#34; \u0026#34;\\\\rightrightarrows\u0026#34;)) (?\u0026lt; (\u0026#34;\\\\preceq\u0026#34; \u0026#34;\\\\leftarrow\u0026#34; \u0026#34;\\\\longleftarrow\u0026#34;)) (?| (\u0026#34;\\\\parallel\u0026#34; \u0026#34;\\\\mid\u0026#34; \u0026#34;\\\\perp\u0026#34;)) (?S (\u0026#34;\\\\Sigma\u0026#34; \u0026#34;\\\\sum_{?}^{}\u0026#34;)) (?{ (\u0026#34;\\\\subset\u0026#34; \u0026#34;\\\\prec\u0026#34; \u0026#34;\\\\subseteq\u0026#34;)) (?} (\u0026#34;\\\\supset\u0026#34; \u0026#34;\\\\succ\u0026#34; \u0026#34;\\\\supseteq\u0026#34;))))) reftex\n(add-hook! \u0026#39;org-mode-hook #\u0026#39;reftex-mode) latex packages\n(setq org-latex-packages-alist \u0026#39;((\u0026#34;\u0026#34; \u0026#34;amsmath\u0026#34; t) (\u0026#34;T1\u0026#34; \u0026#34;fontenc\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;bm\u0026#34; t) ; Bold math required (\u0026#34;\u0026#34; \u0026#34;mathtools\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;siunitx\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;physics2\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;amssymb\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;algpseudocode\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;mlmodern\u0026#34; t))) (setq org-latex-preview-preamble \u0026#34;\\\\documentclass{article} [DEFAULT-PACKAGES] [PACKAGES] \\\\usepackage{xcolor} \\\\usephysicsmodule{ab,ab.braket,diagmat,xmat}% \u0026#34;) Org Roam (package! org-roam-ui) (map! :after evil :leader :desc \u0026#34;toggle org roam ui\u0026#34; :n \u0026#34;n r u\u0026#34; #\u0026#39;org-roam-ui-mode) (setq org-roam-node-display-template (concat \u0026#34;${title:*} \u0026#34; \u0026#34; \u0026#34; (propertize \u0026#34;${doom-tags:42}\u0026#34; \u0026#39;face \u0026#39;(:inherit org-tag :box nil)))) Roam template\nDefault template included too much auxiliary details, only need dates included\n(setq org-roam-capture-templates \u0026#39;((\u0026#34;d\u0026#34; \u0026#34;default\u0026#34; plain \u0026#34;%?\u0026#34; :target (file+head \u0026#34;%\u0026lt;%Y%m%d\u0026gt;-${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n\u0026#34;) :unnarrowed t))) d default plain %? :target (file+head %\u0026lt;%Y%m%d\u0026gt;-${slug}.org #+title: ${title} ) |:unnarrowed |t |\nLSP support in src blocks Now, by default, LSPs don\u0026rsquo;t really function at all in src blocks.\n(cl-defmacro lsp-org-babel-enable (lang) \u0026#34;Support LANG in org source code block.\u0026#34; (setq centaur-lsp \u0026#39;lsp-mode) (cl-check-type lang string) (let* ((edit-pre (intern (format \u0026#34;org-babel-edit-prep:%s\u0026#34; lang))) (intern-pre (intern (format \u0026#34;lsp--%s\u0026#34; (symbol-name edit-pre))))) `(progn (defun ,intern-pre (info) (let ((file-name (-\u0026gt;\u0026gt; info caddr (alist-get :file)))) (unless file-name (setq file-name (make-temp-file \u0026#34;babel-lsp-\u0026#34;))) (setq buffer-file-name file-name) (lsp-deferred))) (put \u0026#39;,intern-pre \u0026#39;function-documentation (format \u0026#34;Enable lsp-mode in the buffer of org source block (%s).\u0026#34; (upcase ,lang))) (if (fboundp \u0026#39;,edit-pre) (advice-add \u0026#39;,edit-pre :after \u0026#39;,intern-pre) (progn (defun ,edit-pre (info) (,intern-pre info)) (put \u0026#39;,edit-pre \u0026#39;function-documentation (format \u0026#34;Prepare local buffer environment for org source block (%s).\u0026#34; (upcase ,lang)))))))) (defvar org-babel-lang-list \u0026#39;(\u0026#34;go\u0026#34; \u0026#34;python\u0026#34; \u0026#34;ipython\u0026#34; \u0026#34;bash\u0026#34; \u0026#34;sh\u0026#34;)) (dolist (lang org-babel-lang-list) (eval `(lsp-org-babel-enable ,lang))) Export-to Latex\nBy default Org uses pdflatex √ó 3 + bibtex. This simply won‚Äôt do in our modern world. latexmk + biber (which is used automatically with latexmk) is a simply superior combination.\n;; org-latex-compilers = (\u0026#34;pdflatex\u0026#34; \u0026#34;xelatex\u0026#34; \u0026#34;lualatex\u0026#34;), which are the possible values for %latex (setq org-latex-pdf-process \u0026#39;(\u0026#34;latexmk -pdf -shell-escape -interaction=nonstopmode -output-directory=%o %f\u0026#34;)) While org-latex-pdf-process does support a function, and we could use that instead, this would no longer use the log buffer ‚Äî it‚Äôs a bit blind, you give it the file name and expect it to do its thing.\nThe default values of org-latex-compilers is given in commented form to see how org-latex-pdf-process works with them.\nHugo\norg-export-with-buffer-copy no longer exists in latest version\n(defun org-html-format-latex (latex-frag processing-type info) \u0026#34;Format a LaTeX fragment LATEX-FRAG into HTML. PROCESSING-TYPE designates the tool used for conversion. It can be `mathjax\u0026#39;, `verbatim\u0026#39;, `html\u0026#39;, nil, t or symbols in `org-preview-latex-process-alist\u0026#39;, e.g., `dvipng\u0026#39;, `dvisvgm\u0026#39; or `imagemagick\u0026#39;. See `org-html-with-latex\u0026#39; for more information. INFO is a plist containing export properties.\u0026#34; (let ((cache-relpath \u0026#34;\u0026#34;) (cache-dir \u0026#34;\u0026#34;)) (unless (or (eq processing-type \u0026#39;mathjax) (eq processing-type \u0026#39;html)) (let ((bfn (or (buffer-file-name) (make-temp-name (expand-file-name \u0026#34;latex\u0026#34; temporary-file-directory)))) (latex-header (let ((header (plist-get info :latex-header))) (and header (concat (mapconcat (lambda (line) (concat \u0026#34;#+LATEX_HEADER: \u0026#34; line)) (org-split-string header \u0026#34;\\n\u0026#34;) \u0026#34;\\n\u0026#34;) \u0026#34;\\n\u0026#34;))))) (setq cache-relpath (concat (file-name-as-directory org-preview-latex-image-directory) (file-name-sans-extension (file-name-nondirectory bfn))) cache-dir (file-name-directory bfn)) ;; Re-create LaTeX environment from original buffer in ;; temporary buffer so that dvipng/imagemagick can properly ;; turn the fragment into an image. (setq latex-frag (concat latex-header latex-frag)))) (with-temp-buffer (insert latex-frag) (org-format-latex cache-relpath nil nil cache-dir nil \u0026#34;Creating LaTeX Image...\u0026#34; nil processing-type) (buffer-string)))) (setq org-hugo-base-dir \u0026#34;~/orgblog/\u0026#34;) jupyter in org For somehow reason, emacs cannot detect my python and need this line to work.\n(after! (ob-jupyter) (org-babel-jupyter-aliases-from-kernelspecs)) org-noter nov and djvu package\nThese packages are required for unknown reasons. Install to avoid repeating warning\n(package! nov) (package! djvu) org-download-dir (setq-default org-download-image-dir ) SageMath (package! sage-shell-mode) (package! ob-sagemath) (use-package! ob-sagemath ;; Ob-sagemath supports only evaluating with a session. :config (setq org-babel-default-header-args:sage \u0026#39;((:session . t) (:results . \u0026#34;output\u0026#34;))) ;; C-c c for asynchronous evaluating (only for SageMath code blocks). (with-eval-after-load \u0026#34;org\u0026#34; (define-key org-mode-map (kbd \u0026#34;C-c c\u0026#34;) \u0026#39;ob-sagemath-execute-async)) ;; Do not confirm before evaluation (setq org-confirm-babel-evaluate nil) ;; Do not evaluate code blocks when exporting. (setq org-export-babel-evaluate nil) ;; Show images when opening a file. (setq org-startup-with-inline-images t) ;; Set sage root (setq sage-shell:sage-root \u0026#34;~/miniforge3/envs/sage/bin\u0026#34;) ;; Show images after evaluating code blocks. (add-hook \u0026#39;org-babel-after-execute-hook \u0026#39;org-display-inline-images)) Edit Yasnippet auto-expand ;; Function that tries to autoexpand YaSnippets ;; The double quoting is NOT a typo! (defun my/yas-try-expanding-auto-snippets () (when (and (boundp \u0026#39;yas-minor-mode) yas-minor-mode) (let ((yas-buffer-local-condition \u0026#39;\u0026#39;(require-snippet-condition . auto))) (yas-expand)))) ;; Try after every insertion (add-hook \u0026#39;post-self-insert-hook #\u0026#39;my/yas-try-expanding-auto-snippets) (add-to-list \u0026#39;warning-suppress-types \u0026#39;(yasnippet backquote-change)) File-templates dir (setq +file-templates-dir \u0026#34;~/.config/doom/file-templates/\u0026#34;) Programming vterm default shell (setq shell-file-name (executable-find \u0026#34;bash\u0026#34;)) (setq-default vterm-shell (executable-find \u0026#34;fish\u0026#34;)) Quickrun (map! :after evil :desc \u0026#34;quickrun\u0026#34; :n \u0026#34;\u0026lt;f1\u0026gt;\u0026#34; #\u0026#39;quickrun) Tabnine (package! tabnine) (package! tabnine-capf :recipe (:host github :repo \u0026#34;50ways2sayhard/tabnine-capf\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.sh\u0026#34;))) (use-package! tabnine :hook (((prog-mode vterm-mode). tabnine-mode) (kill-emacs . tabnine-kill-process)) :config (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;tabnine-completion-at-point) (tabnine-start-process) :bind (:map tabnine-completion-map (\u0026#34;\u0026lt;tab\u0026gt;\u0026#34; . tabnine-accept-completion) (\u0026#34;TAB\u0026#34; . tabnine-accept-completion) (\u0026#34;M-f\u0026#34; . tabnine-accept-completion-by-word) (\u0026#34;M-\u0026lt;return\u0026gt;\u0026#34; . tabnine-accept-completion-by-line) (\u0026#34;C-g\u0026#34; . tabnine-clear-overlay) (\u0026#34;M-[\u0026#34; . tabnine-previous-completion) (\u0026#34;M-]\u0026#34; . tabnine-next-completion)) ) (when (fboundp #\u0026#39;tabnine-completion-at-point) (add-hook \u0026#39;lsp-completion-mode-hook (defun lsp-capf () (remove-hook \u0026#39;completion-at-point-functions #\u0026#39;lsp-completion-at-point t) (add-hook \u0026#39;completion-at-point-functions (cape-capf-super #\u0026#39;lsp-completion-at-point #\u0026#39;tabnine-completion-at-point) nil t)))) (use-package tabnine-capf :after cape :hook (kill-emacs . tabnine-capf-kill-process) :config (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;tabnine-completion-at-point)) Stick scroll (add-to-list \u0026#39;semantic-default-submodes \u0026#39;global-semantic-stickyfunc-mode) (add-hook! \u0026#39;prog-mode-hook #\u0026#39;semantic-mode) ","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/posts/config/","tags":null,"title":"My Doom Configuration"},{"categories":null,"content":"Electromagnetism Electric Force Net force: \\( \\vec{F_{R}} = \\vec{F}_{1 \\text{ on } q} + \\vec{F}_{2 \\text{ on } q} + \\dots\\) Electric force is similar to the gravitational but varies inversely, like \\( \\lim x \\text{ and } \\lim \\frac{1}{x} \\)\nUnlike there is only attaction in gravitation, electrical has repulsion.\nElectric charge Coulomb\u0026rsquo;s law \\[ F = k_e \\frac{q_1q_2}{r ^2} \\vec{\\mathbf{r}}\\]\nNote:\\( k_e = \\frac{1}{4 \\pi \\epsilon_{0}} \\sim 8.99* 10 ^{9} \\) and \\( \\vec{r} \\) is the unit vector on the direction.\nSimilar to Gravitational force \\[ F = G \\frac{M_{1}M_2}{r ^2}\\]\nWe take differentiation for one of the \\( q_{i} \\), that is \\[ dF = k_e \\frac{q_1 \\text{d} q_2}{r ^2} = k_e \\frac{q_1 \\lambda d z}{r ^2}\\]\nz-axis: line of charge The last equal sign follows from the linear charge density \\( \\lambda \\)(\\( C m^{-1} \\)): dz = \\( \\lambda \\) dq at \u0026ldquo;\\( dz \\)\u0026rdquo;.\nEvaluation of integration\nBy first, following from the image above, we could see that every charge at z-axis has a corresponding charge in the opposite direction performing cancellation. Such that\n\\begin{align*} \\vec{F}_R \u0026amp;= \\int d\\vec{F}_{x} \\\\ \u0026amp;= \\int d\\vec{F}_{dq} \\cos \\theta \\\\ \u0026amp;= \\int k_e \\frac{q_1 \\lambda dz}{r ^2} \\cos \\theta \\end{align*}\nThis is hard to integrate at this point. To solve we can use trig to transform z, r in \\( \\theta, x\\) (or opposite).\n\\[ \\cos \\theta = \\frac{x}{r} \\implies \\frac{1}{r ^2} = \\frac{\\cos ^2 \\theta}{x ^2}\\]\n\\[ \\tan \\theta = \\frac{z}{x} \\implies z = x \\tan \\theta \\implies dz = x \\sec ^2 \\theta d\\theta\\]\nTherefore,\n\\begin{align*} \\vec{F}_R \u0026amp;= \\int k_{e} \\frac{q_1 \\lambda x \\sec ^2 \\theta \\cos ^2 \\theta d\\theta}{x ^2} \\cos \\theta \\\\ \u0026amp;= \\frac{k_e q_{1}\\lambda}{x} \\int_{-\\pi/2}^{\\pi/2} \\cos \\theta d\\theta \\\\ \u0026amp;= \\frac{2k_eq_1\\lambda}{x} = \\frac{1}{2 \\pi \\epsilon_0} \\frac{q \\lambda}{x} \\end{align*}\nRepeating Coulomb\u0026rsquo;s Experiment\nThere is two identical balls hanging with silk thread which have a metallised surface.\nFrom the following formula deduction:\n\\begin{equation} \\label{eq:1} mg = \\tau \\cos \\theta \\implies \\tau = \\frac{mg}{\\cos \\theta} \\end{equation}\n\\begin{equation} \\label{eq:2} F_{Q1} = \\tau \\sin \\theta = mg \\tan \\theta = mg\\frac{r_1 / 2}{\\sqrt{\\ell_2 - (\\frac{r_1}{2})^2}} = \\frac{mgr_1}{\\sqrt{4\\ell_2 - r_1 ^2}} \\end{equation}\nThen, suppose two balls, initially, are charged with \\( Q_{1} \\). If we halve the charge in one of them, we will get a new radius, called \\( r_2 \\), and so \\( F_2 \\) from the equation above.\nIf we keep repeating this process, we could get a list of data.\nBut before that, from Coulomb\u0026rsquo;s law , we know that\n\\begin{equation} F = \\frac{1}{4\\pi\\varepsilon_0} \\frac{(1 \\times 10 ^{-8}) ^2}{r_1 ^2} = \\frac{mg r_1}{\\sqrt{4\\ell_2} - r_1 ^2} \\end{equation}\nElectric Field Electric field defined as force per unit positive charge. \\[ \\vec{E} = \\frac{\\vec{F}}{q} (\\text{Units: } N.C ^{\\text{-}1} \\text{ or } V.m ^{\\text{-}1})\\]\nor \\[ \\vec{E} = k_e\\frac{q}{r ^2}\\]\nSimilarly, we evaluate its derivative \\[ d\\vec{E} = k_e \\frac{\\text{d} q}{r ^2} = k_e \\frac{\\lambda d z}{r ^2}\\] And then its integral\nFrom horizontal symmetry, \\[ \\vec{E} = \\int d\\vec{E} \\cos \\theta \\] Here,\n\\begin{align*} r ^2 \u0026amp;= z ^2 = R ^2 \\\\ \\cos \\theta \u0026amp;= \\frac{z}{r} = \\frac{z}{\\sqrt{z ^2 + R ^2}} \\end{align*}\nAnd so\n\\begin{align*} \\vec{E} \u0026amp;= \\int d\\vec{E} \\cos \\theta \\\\ \u0026amp;= k_e \\frac{1}{z ^2 + R ^2} \\frac{z}{\\sqrt{z ^2 + R ^2}} \\int_{\\mathrm{ring }}dQ \\\\ \u0026amp;= k_e \\frac{Qz}{(z ^2 + R ^2 )^{3/2}} \\end{align*}\nDipole moment \\[|\\vec{p}| = qd\\]\nin the direction from -ve to + ve charge. Why do we use electric field? If we know the electric field at any point we can immediately calculate the force it will apply to any arbitrary charge, q, placed at that point.\nTorque experienced in an electric field ATTACH \\begin{align*} \\vec{\\tau} \u0026amp;= \\vec{r} \\vec{F} \\\\ \\vec{F} \u0026amp;= \\vec{E} q \\\\ \\end{align*}\n\\begin{align*} \\implies \\vec{\\tau} \u0026amp;= -\\vec{d}\\vec{E}q \\sin \\theta \\\\ \u0026amp;= -q \\vec{d} E \\sin \\theta \\\\ \u0026amp;= |\\vec{p}| \\vec{E} \\end{align*}\nGauss\u0026rsquo; Law -ve on in going +ve on out going\nThe body of Gauss\u0026rsquo; law is the equation:\n\\[ \\Phi = \\oint \\vec{E} d\\vec{A}\\]\nFor different shapes, the electric field lines passed through are different resulting in different \\( \\Phi \\). The followings are some common shapes which we might often meet.\nCould also be applied to other fields, for example, gravitational field\nSphere\nFollowing from Gauss\u0026rsquo; law, we have,\n\\begin{align*} \\vec{E} \\oint_{\\text{sphere}} d\\vec{A} \u0026amp;= \\frac{q}{\\varepsilon_{0}} \\\\ \\vec{E} 4 \\pi r ^2 \u0026amp;= \\frac{q}{\\varepsilon_{0}} \\\\ E \u0026amp;= k_e \\frac{q}{r ^2} \\end{align*}\nCylinder\nVertical aligned\nFor a vertical cylinder,\n\\[ \\vec{E}\\oint d\\vec{A} = \\frac{q_{enclosed}}{\\varepsilon_{0}} \\] Because the top and bottom circle area are paralleled to the electric field, so we could ignore them. So, we have, \\[ \\vec{E} 2 \\pi r h = \\frac{q_{enclosed}}{\\varepsilon_{0}} \\] Notice here, we could replace \\( q_{enclose} \\) with \\( \\lambda h \\), then\n\\begin{align*} \\vec{E} 2\\pi r h \u0026amp;= \\frac{\\lambda h}{\\varepsilon_{0}} \\\\ \\vec{E} \u0026amp;= k_e \\frac{2\\lambda}{r} \\end{align*}\nWe could generalise the equation, \\[ \\vec{E} = k_e \\frac{\\lambda \\theta}{r}\\]\nCan we replace Œª with œÉ ?\nMaybe, but the key difference is the electric field is passing through a curved surface in this situation, whereas the horizonal one is a flat surface.\nHorizontal aligned ATTACH\n\\( \\sigma (c \\cdot m ^{-2}) \\) sheet of charge (charge on that sheet) From the flux from two end of the cylinder, we get\n\\begin{align*} EA + EA \u0026amp;= \\frac{\\sigma A}{\\varepsilon_{0}} \\\\ E \u0026amp;= \\frac{\\sigma}{2 \\varepsilon_{0}} \\end{align*}\nAn charged partitle in electric field\n\\[ \\Delta t = \\frac{L}{v_{x}}\\]\nFor a electron passing through a electric field, because it is only experiencing the field force, so we have\n\\begin{align*} F = Eq \u0026amp;= ma \\\\ \\implies a \u0026amp;= \\frac{Eq}{m} \\\\ \\Delta y \u0026amp;= \\frac{1}{2} (\\frac{Eq}{m}) (t ^2) \\\\ \u0026amp;= \\frac{1}{2} \\frac{Eq}{m} \\frac{L^2}{v_x^2} \\end{align*}\nAsymmetric\nAt the mid point of two positive, \\[ EA - EA = 0\\]\nPrinciple of Faraday\u0026rsquo;s cage Will terminate inside somewhere, symetrically cancelled out(?).\n","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/posts/20240722-physics_2_adv/","tags":["Electromagnetic","Physics"],"title":"Physics 2 adv. lecture note"},{"categories":null,"content":" ‰ΩøÁî®ÊøÄÊ¥ªÁ†Å J8WVF-9X3GM-4WVYC-VDHQG-42CXT Ëã•ÊòØÊó†Ê≥ïÊøÄÊ¥ªÊàêÂäüÂàô‰ΩøÁî® admin ÊâìÂºÄ powershell ËæìÂÖ• irm massgrave.dev/get | iex ÂêéÂàÜÂà´ËæìÂÖ• 7 1 1 ÈáçÂêØ ÂÜçÊ¨°ÊâìÂºÄ powershell ËæìÂÖ• irm massgrave.dev/get | iex ËæìÂÖ• 1 Âç≥ÂèØÊøÄÊ¥ª ","permalink":"http://localhost:1313/Seinichts/seinichts.github.io/posts/windows-11-pro-education-edition-activation/","tags":null,"title":"windows-11 Pro-education edition activation"}]